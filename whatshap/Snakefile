import pysam
picard_tmpdir_switch=''
if 'TMPDIR' in os.environ : picard_tmpdir_switch='TMP_DIR=%s'%os.environ['TMPDIR']

genome = ['yeast']
genome1 = ['SK1', 'Y12']
platform = ['illumina', 'pacbio']
sample = ['SK1_Y12']
coverage = [10,20,30,40]
chromosome = ['I','II','III','IV','V','VI','VII','VIII','IX','X','XI','XII','XIII','XIV','XV','XVI']
tigids_10 = ["tig00000502","tig00000209","tig00000191","tig00000170","tig00000501","tig00000177","tig00000161","tig00000160","tig00000023","tig00000497","tig00(gedit:84517): Gtk-WARNING **: Calling Inhibit failed: GDBus.Error:org.freedesktop.DBus.Error.ServiceUnknown: The name org.gnome.SessionManager was not provided by any .service files000157","tig00000124","tig00000096","tig00000487","tig00000237","tig00000120","tig00000116","tig00000109","tig00000082","tig00000485","tig00000129","tig00000126","tig00000020","tig00000482","tig00000140","tig00000105","tig00000089","tig00000071","tig00000481","tig00000479","tig00000349","tig(gedit:84517): Gtk-WARNING **: Calling Inhibit failed: GDBus.Error:org.freedesktop.DBus.Error.ServiceUnknown: The name org.gnome.SessionManager was not provided by any .service files00000330","tig00000229","tig00000122","tig00000027","tig00000320","tig00000240","tig00000213","tig00000201","tig00000175","tig00000041","tig00000039","tig00000323","tig00000156","tig00000142","tig00000136","tig00000052","tig00000011","tig00000318","tig00000001","tig00000312","tig00000232","tig00000054","tig00000301","tig00000251","tig00000221","tig00000076","tig00000062","tig00000016","tig00000295","tig00000079","tig00000078","tig00000293","tig00000231","tig00000291","tig00000218","tig00000210","tig00000181","tig00000288","tig00000067","tig00000286","tig00000098","tig00000281","tig00000278","tig00000208","tig00000196","tig00000194","tig00000164","tig00000277","tig00000238","tig00000228","tig00000222","tig00000151","tig00000275","tig00000044","tig00000273","tig00000226","tig00000185","tig00000270","tig00000248","tig00000048","tig00000043","tig00000037","tig00000268","tig00000202","tig00000179","tig00000118","tig00000264","tig00000219","tig00000193","tig00000262","tig00000087","tig00000025","tig00000018","tig00000014","tig00000261","tig00000113","tig00000058","tig00000259","tig00000235","tig00000224","tig00000204","tig00000189","tig00000183","tig00000153","tig00000133","tig00000102","tig00000056","tig00000028","tig00000258","tig00000002","tig00000257"]
tigids_20 = ["tig00000276","tig00000106","tig00000274","tig00000273","tig00000068","tig00000064","tig00000025","tig00000271","tig00000102","tig00000270","tig00000110","tig00000084","tig00000267","tig00000266","tig00000265","tig00000263","tig00000260","tig00000259","tig00000026","tig00000257","tig00000255","tig00000071","tig00000060","tig00000003","tig00000254","tig00000253","tig00000252","tig00000251","tig00000250","tig00000248","tig00000247","tig00000054","tig00000048","tig00000027","tig00000246","tig00000245","tig00000244","tig00000242","tig00000175","tig00000108","tig00000033","tig00000158","tig00000030","tig00000154","tig00000062","tig00000019","tig00000146","tig00000138","tig00000039","tig00000133","tig00000045","tig00000132","tig00000082","tig00000073","tig00000017","tig00000135","tig00000130","tig00000129","tig00000088","tig00000047","tig00000124","tig00000121","tig00000035","tig00000016","tig00000118","tig00000090","tig00000057","tig00000117","tig00000070","tig00000115","tig00000113"]
tigids_30 = ["tig00000452","tig00000018","tig00000451","tig00000448","tig00000134","tig00000447","tig00000141","tig00000090","tig00000446","tig00000144","tig00000040","tig00000444","tig00000082","tig00000046","tig00000440","tig00000015","tig00000439","tig00000115","tig00000429","tig00000432","tig00000428","tig00000063","tig00000056","tig00000427","tig00000425","tig00000424","tig00000038","tig00000030","tig00000423","tig00000086","tig00000084","tig00000421","tig00000420","tig00000073","tig00000418","tig00000419","tig00000417","tig00000142","tig00000128","tig00000011","tig00000416","tig00000414","tig00000413","tig00000405","tig00000404","tig00000403","tig00000060","tig00000058","tig00000402","tig00000108","tig00000401","tig00000002","tig00000400","tig00000204","tig00000152","tig00000150","tig00000201","tig00000160","tig00000197","tig00000047","tig00000199","tig00000174","tig00000136","tig00000132","tig00000195","tig00000023","tig00000192","tig00000078","tig00000077","tig00000190","tig00000067","tig00000028","tig00000027","tig00000026","tig00000021","tig00000186","tig00000127","tig00000123","tig00000005","tig00000180","tig00000163","tig00000106","tig00000074","tig00000177","tig00000176","tig00000165","tig00000099","tig00000049"]
tigids_40 = ["tig00000549","tig00000191","tig00000187","tig00000547","tig00000097","tig00000546","tig00000182","tig00000544","tig00000056","tig00000543","tig00000539","tig00000538","tig00000537","tig00000122","tig00000536","tig00000535","tig00000534","tig00000120","tig00000040","tig00000533","tig00000531","tig00000530","tig00000028","tig00000027","tig00000011","tig00000528","tig00000199","tig00000074","tig00000073","tig00000070","tig00000527","tig00000526","tig00000100","tig00000081","tig00000059","tig00000525","tig00000523","tig00000522","tig00000521","tig00000089","tig00000057","tig00000520","tig00000519","tig00000176","tig00000161","tig00000042","tig00000516","tig00000515","tig00000513","tig00000510","tig00000067","tig00000506","tig00000501","tig00000167","tig00000505","tig00000504","tig00000078","tig00000026","tig00000500","tig00000499","tig00000113","tig00000498","tig00000497","tig00000152","tig00000495","tig00000494","tig00000148","tig00000136","tig00000127","tig00000125","tig00000043","tig00000218","tig00000140","tig00000029","tig00000014","tig00000212","tig00000196","tig00000024","tig00000016","tig00000207","tig00000162"]

# Tools assumed to be installed somewhere on the PATH.
samtools = '/MMCI/TM/structvar/work/software/packages/samtools-1.2/samtools'
bwa = '/MMCI/TM/structvar/work/software/packages/bwa-0.7.12/bwa'
picard = '/MMCI/TM/structvar/work/software/packages/picard-tools-1.130/picard.jar'
seqtk = '~/seqtk/seqtk'
sga = '~/sga_run/sga/src/SGA/sga'
bfc = '~/bfc/bfc'
gfatools = '~/fermikit/fermi.kit/k8 ~/gfatools/gfatools.js'
whatshap = 'whatshap'
vg = '~/vg_run/vg/bin/vg'
art = '/local/data/dip_assm/simulated/art_src_MountRainier_Linux/binaries/art_illumina'
grem = './scripts/grem'
mummer = '~/MUMmer3.23/dnadiff'

#do this for mummer
# LD_LIBRARY_PATH=/home/sgarg/anaconda3_fix/lib/:$LD_LIBRARY_PATH
# export LD_LIBRARY_PATH

dataset_pattern = '{genome,[a-z]+}.{platform,[a-z]+}.{sample,[A-Z_0-9]+}'

# for now, manually indexed canu contigs
rule master:
	input:
		expand('canu_cov{coverage}/yeast.contigs.x.fasta.bwt', coverage = coverage),
		#expand('sga/reads/{genome}.illumina.{sample}.cov{coverage}.chr{chromosome}.pp.rbwt', genome = genome, sample = sample, coverage=coverage, chromosome = chromosome),
		#expand('gfatools/graphs/{genome}.illumina.{sample}.cov{coverage}.chr{chromosome}.pp.assembly-graph.int.gfa', genome = genome, sample = sample, coverage=coverage, chromosome = chromosome),
		expand('illumina/sim.SK1_Y12.pp.fq', genome1= genome1),
		expand('canu_cov{coverage}/yeast.contigs.x.fasta', coverage=coverage),
		expand('approach/graph/sim.SK1_Y12.chrall.cov{coverage}.seeds.gam', coverage=coverage),
		expand('canu_cov{coverage}/yeast.contigs.seeds.gam', coverage=coverage),
		expand('pacbio/sim.{genome1}.chr{chromosome}.fastq.gz', genome1=genome1, chromosome= chromosome),
		expand('illumina/sim.SK1_Y12.pp.rbwt'),
		expand('approach/graph/sim.SK1_Y12.chrall.cov{coverage}.len1500.gam', coverage=coverage),
		expand('canu_cov{coverage}/yeast.contigs.gam', coverage=coverage),
		expand('mummer/canu/yeast.canu_cov{coverage}to{genome1}.report', coverage = coverage, genome1=genome1),
		expand('true_haps/SK1_Y12.genome.gam'),
		expand('canu_cov{coverage}/true_haps2yeast.contigs.sorted.bam', coverage = coverage),
		expand('canu_cov{coverage}/linear_comparison.eval', coverage= coverage),
		expand('canu_cov{coverage}/yeast.contigs.gam_tig00000027.trans', coverage = coverage)

	message: 'MASTER rule'

#sgarg@d3compute02:/local/data/yeast_analysis/true_haps$ zcat SK1.genome.fa.gz > SK1.genome.fa
#sgarg@d3compute02:/local/data/yeast_analysis/true_haps$ zcat Y12.genome.fa.gz > Y12.genome.fa
#sgarg@d3compute02:/local/data/yeast_analysis/true_haps$ sed -i -e 's/>/>SK1/g' SK1.genome.fa
#sgarg@d3compute02:/local/data/yeast_analysis/true_haps$ sed -i -e 's/>/>Y12/g' Y12.genome.fa
#sgarg@d3compute02:/local/data/yeast_analysis/true_haps$ faidx --split-files SK1.genome.fa
#sgarg@d3compute02:/local/data/yeast_analysis/true_haps$ faidx --split-files Y12.genome.fa
	
	

rule simulate_illumina_reads:
	input:
		fasta1='true_haps/{genome1, [a-zA-Z0-9]+}.genome.fa',
	output: 'illumina/sim.{genome1, [a-zA-Z0-9]+}_1.fq', 'illumina/sim.{genome1, [a-zA-Z0-9]+}_2.fq'
	log: 'illumina/sim.{genome1, [a-zA-Z0-9]+}_1.fq.log'
	threads: 2
	run: 
		#prefin = input.fasta1.split("/")[1].split(".")[:-1][0]
		prefixout = '.'.join(map(str, output[0].split(".")[:-1]))[:-1]
		shell('{art} -ss HSXn -sam -i {input.fasta1} -p -d {wildcards.genome1} -l 150 -f 15 -m 200 -s 10 -o {prefixout} > {log} 2>&1')

rule combine_strains:
	input:'illumina/sim.SK1_1.fq', 'illumina/sim.Y12_1.fq', 'illumina/sim.SK1_2.fq', 'illumina/sim.Y12_2.fq'
	output: 'illumina/sim.SK1_Y12.1.fq', 'illumina/sim.SK1_Y12.2.fq',
	shell: 'cat {input[0]} {input[1]} > {output[0]} && cat {input[2]} {input[3]} > {output[1]}'

rule bfc_error_correction:
	input: 'illumina/sim.SK1_Y12.1.fq', 'illumina/sim.SK1_Y12.2.fq',
	output: 'illumina/sim.SK1_Y12.1.bfc.fq', 'illumina/sim.SK1_Y12.2.bfc.fq',
	shell: '~/bfc/bfc -s 12.16m -t 16 {input[0]} > {output[0]} && ~/bfc/bfc -s 12.16m -t 16 {input[1]} > {output[1]}'

rule sga_preprocessing:
	input:
		fastq1='illumina/sim.SK1_Y12.1.bfc.fq',
		fastq2='illumina/sim.SK1_Y12.2.bfc.fq',
	output: 
		fastq = 'illumina/sim.SK1_Y12.pp.fq',
	log:'illumina/sim.SK1_Y12.pp.fq.log'
	message: 'Preprocessing paired-end illumina reads'
	shell: 'sga preprocess --pe-mode 1 -o {output.fastq} {input.fastq1} {input.fastq2} > {log} 2>&1'

rule sga_index:
	input:
		fastq = 'illumina/sim.SK1_Y12.pp.fq',
	output:
		rbwt = 'illumina/sim.SK1_Y12.pp.rbwt',
		bwt = 'illumina/sim.SK1_Y12.pp.bwt',
		rsai = 'illumina/sim.SK1_Y12.pp.rsai',
		sai = 'illumina/sim.SK1_Y12.pp.sai',
	log: 'illumina/sim.SK1_Y12.pp.sai.log'
	message: 'SGA Indexing'
	run:
		shell('sga index -a ropebwt -t 20 {input.fastq} > {log} 2>&1')
		shell('mv sim.SK1_Y12.pp.* illumina/')

# sgarg@d3compute02:/local/data/yeast_analysis/illumina$ sga filter -x 2 --homopolymer-check --low-complexity-check -t 12 sim.SK1_Y12.pp.fq
# https://github.com/sestaton/Pairfq
#sgarg@d3compute02:/local/data/yeast_analysis$ ./scripts/pairfq_lite makepairs -i illumina/sim.SK1_Y12.pp.filter.pass.fa -fp illumina/sim.SK1_Y12.pp.filter.pass.1.fa -rp illumina/sim.SK1_Y12.pp.filter.pass.2.fa -fs illumina/sim.SK1_Y12.pp.filter.pass.fs.fa -rs illumina/sim.SK1_Y12.pp.filter.pass.rs.fa
#lap-13-63:/home/shilpa/mikko/whole_yeast_genome/try# ./spades.py -1 ../yeast_analysis/sim.SK1_Y12.pp.filter.pass.1.fa -2 ../yeast_analysis/sim.SK1_Y12.pp.filter.pass.2.fa --only-assembler  -o ../yeast_analysis/
# sgarg@d3compute02:/local/data/yeast_analysis$ mkdir graph
#sgarg@d3compute02:/local/data/yeast_analysis/graph$ sed -n 1,392759p assembly_graph.gfa > assembly_graph.P.gfa
#sgarg@d3compute02:/local/data/yeast_analysis/graph$ python ../scripts/String_to_int.py assembly_graph.P.gfa > assembly_graph.P.int.gfa
#sgarg@d3compute02:/local/data/yeast_analysis/graph$ awk -F'\t' '{ if ($2 != $4) print $0}' assembly_graph.P.int.gfa > assembly_graph.P.int.remn2n.gfa
#sgarg@d3compute02:/local/data/yeast_analysis/graph$ ../scripts/vg view --gfa-in --vg assembly_graph.P.int.remn2n.gfa > assembly_graph.P.int.remn2n.vg
#sgarg@d3compute02:/local/data/yeast_analysis/graph$ ../scripts/vg mod -X 100 assembly_graph.P.int.remn2n.vg > assembly_graph.P.int.remn2n.X.vg
#sgarg@d3compute02:/local/data/yeast_analysis/graph$ ../scripts/vg view -g assembly_graph.P.int.remn2n.X.vg | awk -F'\t' '{ if ($2 != $4) print $0}' - | ../scripts/vg view --gfa-in --vg - > graph.vg
# sgarg@d3compute02:/local/data/yeast_analysis/pacbio$ cat SK1.filtered_subreads.fastq Y12.filtered_subreads.fastq > sample.fastq

rule simulate_pacbio_reads:
	input: 
		sample='pacbio/sample.fastq',
		haplotype='true_haps/{genome1, [a-zA-Z0-9]+}chr{chromosome, (all|[I|V|X]+)}.fa'
	output:
		fastq='pacbio/sim.{genome1, [a-zA-Z0-9]+}.chr{chromosome, (all|[I|V|X]+)}.fastq.gz',
		maf='pacbio/sim.{genome1, [a-zA-Z0-9]+}.chr{chromosome, (all|[I|V|X]+)}.maf.gz'
	log: 'pacbio/sim.{genome1, [a-zA-Z0-9]+}.chr{chromosome, (all|[I|V|X]+)}.fastq.log'
	message: 'Simulating PacBio reads {output}'
	run:
		coverage = 40
		halfcoverage = coverage / 2
		seed = abs(hash(output.fastq))
		shell('mkdir -p pacbio/tmp')
		shell('time (pbsim --seed {seed} --prefix pacbio/tmp/sim.{wildcards.genome1}.chr{wildcards.chromosome} --depth {halfcoverage} --sample-fastq {input.sample} {input.haplotype}) > {log} 2>&1')
		shell('awk \'NR%4==1 {{printf("%s_HAP{wildcards.genome1}.chr{wildcards.chromosome}\\n",$0)}} NR%4!=1 {{print}}\' pacbio/tmp/sim.{wildcards.genome1}.chr{wildcards.chromosome}_0001.fastq | gzip > {output.fastq}')
		shell('cat pacbio/tmp/sim.{wildcards.genome1}.chr{wildcards.chromosome}_0001.maf | gzip > {output.maf}')
		shell('rm -f pacbio/tmp/sim.{wildcards.genome1}.chr{wildcards.chromosome}_*')

rule combine_pacbio_strains:
	input: 'pacbio/sim.SK1.chr{chromosome, (all|[I|V|X]+)}.fastq.gz', 'pacbio/sim.Y12.chr{chromosome, (all|[I|V|X]+)}.fastq.gz',
	output: 'pacbio/sim.SK1_Y12.chr{chromosome, (all|[I|V|X]+)}.cov40.fastq'
	shell: 'zcat {input[0]} {input[1]} > {output}'

#fix this.
#rule combine_pacbio_chrms:
#	input: 'pacbio/sim.SK1_Y12.chr{chromosome, (all|[I|V|X]+)}.cov40.fastq',
#	output: expand('pacbio/sim.SK1_Y12.chrall.cov40.fastq', chromosome = chromosome)
#	shell: 'cat {input} > {output}'

#rule downsample_pacbio_reads:
#	input:
#		fastq1='pacbio/sim.SK1_Y12.chrall.cov40.fastq',
#	output:
#		fastq1='pacbio/sim.SK1_Y12.chrall.cov{coverage,([0-9]+)}.lenall.fastq',
#	message: 'Downsample input data to {wildcards.coverage}x'
#	run:
#		p = float(wildcards.coverage) / 40
#		print(p)
#		shell('{seqtk} sample -s100 {input.fastq1} p > {output.fastq1}')
# sgarg@d3compute02:/local/data/yeast_analysis/pacbio$ for i in 10 20 30 40; do awk 'BEGIN {OFS = "\n"} {header = $0 ; getline seq ; getline qheader ; getline qseq ; if (length(seq) >1500) {print header, seq, qheader, qseq}}' < sim.SK1_Y12.chrall.cov${i}.lenall.fastq > sim.SK1_Y12.chrall.cov${i}.len1500.fastq; done


#rule filter_reads_length:
#	input: 'pacbio/sim.SK1_Y12.chrall.cov{coverage,([0-9]+)}.lenall.fastq'
#	output: 'pacbio/sim.SK1_Y12.chrall.cov{coverage,([0-9]+)}.len1500.fastq'
#	shell:"awk '!/^>/ {{ next }} {{ getline seq }} length(seq) >= 1500 {{ print $0 "\n" seq }}' {input} > {output}"

# canu and vg, linear
# run with only one thread
rule run_canu:
	input: 'pacbio/sim.SK1_Y12.chrall.cov{coverage,([0-9]+)}.len1500.fastq'
	output: 'canu_cov{coverage,([0-9]+)}/yeast.contigs.fasta'
	run:

		if wildcards.coverage == 40:
			shell('canu -p yeast -d /local/data/yeast_analysis/canu_cov{wildcards.coverage} genomeSize=12.16m  useGrid=0 correctedErrorRate=0.10 -pacbio-raw {input}')
		else:
			shell('canu -p yeast -d /local/data/yeast_analysis/canu_cov{wildcards.coverage} genomeSize=12.16m useGrid=0 corMhapSensitivity=high corMinCoverage=2 correctedErrorRate=0.10 minOverlapLength=499 corMaxEvidenceErate=0.3 -pacbio-raw {input}')
# shilpa@lap-13-63:~/mikko/whole_yeast_genome$ sshfs -o idmap=user sgarg@d3compute02:/local/data/yeast_analysis/ /home/shilpa/mikko/whole_yeast_genome/yeast_mount/

#align pacbio reads
rule reverse_reads:
	input: 'pacbio/sim.SK1_Y12.chrall.cov{coverage,([0-9]+)}.len1500.fastq',
	output: 'pacbio/sim.SK1_Y12.chrall.cov{coverage,([0-9]+)}.len1500.reverse.fastq'
	shell: './scripts/ReverseReads {input} {output}'

# Take care cannot run parallely because seedsoutindex will interfere.
rule grem_seeds:
	input: 'graph/graph.vg', 'pacbio/sim.SK1_Y12.chrall.cov{coverage,([0-9]+)}.len1500.pref1000.fastq', 'pacbio/sim.SK1_Y12.chrall.cov{coverage,([0-9]+)}.len1500.reverse.pref1000.fastq'
	output: 'approach/graph/sim.SK1_Y12.chrall.cov{coverage,([0-9]+)}.seeds.pref1000.gam'
	run:
		shell('{grem} -f {input[1]} -l 20 -e 7 -n 0 -c 100000000 {input[0]}')
		shell('./scripts/ReadIndexToId {input[1]} seedsoutindex approach/graph/seeds_{wildcards.coverage}_fw.pref1000.gam')
		shell('{grem} -f {input[2]} -l 20 -e 7 -n 0 -c 100000000 {input[0]}')
		shell('./scripts/ReadIndexToId {input[2]} seedsoutindex approach/graph/seeds_{wildcards.coverage}_bw.pref1000.gam')
		shell('./scripts/PickSeedHits {output} 50 approach/graph/seeds_{wildcards.coverage}_fw.pref1000.gam approach/graph/seeds_{wildcards.coverage}_bw.pref1000.gam')

rule run_aligner:
	input: 'pacbio/sim.SK1_Y12.chrall.cov{coverage,([0-9]+)}.len1500.fastq', 'approach/graph/sim.SK1_Y12.chrall.cov{coverage,([0-9]+)}.seeds.pref1000.gam', 'graph/graph.vg'
	output: 'approach/graph/sim.SK1_Y12.chrall.cov{coverage,([0-9]+)}.len1500.gam'
	shell: './scripts/wrapper -g {input[2]} -f {input[0]} -s {input[1]} -a {output} -t 40 -b 200 -B 500 1> approach/graph/sim.SK1_Y12.chrall.cov{wildcards.coverage}.len1500.stdout 2> approach/graph/sim.SK1_Y12.chrall.cov{wildcards.coverage}.len1500.stderr'

rule reheader_canu:
	input: 'canu_cov{coverage,([0-9]+)}/yeast.contigs.fasta'
	output: 'canu_cov{coverage,([0-9]+)}/yeast.contigs.x.fasta'
	shell: "cut -d' ' -f 1 {input} > {output}"

#align canu contigs to graphs
rule convert_fasta2fastq:
	input: 'canu_cov{coverage,([0-9]+)}/yeast.contigs.x.fasta'
	output: 'canu_cov{coverage,([0-9]+)}/yeast.contigs.fastq'
	shell: 'perl scripts/fasta_to_fastq.pl {input} > {output}'

rule reverse_canu_reads:
	input: 'canu_cov{coverage,([0-9]+)}/yeast.contigs.fastq',
	output: 'canu_cov{coverage,([0-9]+)}/yeast.contigs.reverse.fastq'
	shell: './scripts/ReverseReads {input} {output}'

# Take care cannot run parallely because seedsoutindex will interfere.
rule grem_canu_seeds:
	input: 'graph/graph.vg', 'canu_cov{coverage,([0-9]+)}/yeast.contigs.fastq', 'canu_cov{coverage,([0-9]+)}/yeast.contigs.reverse.fastq'
	output: 'canu_cov{coverage,([0-9]+)}/yeast.contigs.seeds.gam'
	run:
		shell('{grem} -f {input[1]} -l 20 -e 7 -n 0 -c 100000000 {input[0]}')
		shell('./scripts/ReadIndexToId {input[1]} seedsoutindex canu_cov{coverage,([0-9]+)}/seeds_fw.gam')
		shell('{grem} -f {input[2]} -l 20 -e 7 -n 0 -c 100000000 {input[0]}')
		shell('./scripts/ReadIndexToId {input[2]} seedsoutindex canu_cov{coverage,([0-9]+)}/seeds_bw.gam')
		shell('./scripts/PickSeedHits {output} 50 canu_cov{wildcards.coverage}/seeds_fw.gam canu_cov{wildcards.coverage}/seeds_bw.gam')

rule run_canu_aligner:
	input: 'canu_cov{coverage,([0-9]+)}/yeast.contigs.fastq', 'canu_cov{coverage,([0-9]+)}/yeast.contigs.seeds.gam', 'graph/graph.vg'
	output: 'canu_cov{coverage,([0-9]+)}/yeast.contigs.gam'
	shell: './scripts/wrapper -g {input[2]} -f {input[0]} -s {input[1]} -a {output} -t 40 -b 200 -B 500 1> canu_cov{wildcards.coverage}/yeast.contigs.gam.stdout 2> canu_cov{wildcards.coverage}/yeast.contigs.gam.stderr'

# linear approach
rule index_reference:
	output:
		'{path}.fasta.bwt'
	input:
		'{path}.fasta'
	shell:
		"bwa index {input}"

rule illumina_to_canu:
	input: 'canu_cov{coverage,([0-9]+)}/yeast.contigs.x.fasta', 'illumina/sim.SK1_Y12.1.bfc.fq', 'illumina/sim.SK1_Y12.2.bfc.fq'
	output: 'canu_cov{coverage,([0-9]+)}/illumina2canu.sorted.bam'
	shell: '{bwa} mem -t12 {input[0]} {input[1]} {input[2]} | samtools view -Sb - | samtools sort - > {output}'

rule call_variants:
	input:'canu_cov{coverage,([0-9]+)}/yeast.contigs.x.fasta', 'canu_cov{coverage,([0-9]+)}/illumina2canu.sorted.bam'
	output: 'canu_cov{coverage,([0-9]+)}/illumina2canu.vcf'
	shell: 'freebayes -f {input[0]} {input[1]} | bcftools view -v snps,indels - | bgzip -c | vcf-sort - > {output}'

rule pacbio_to_canu:
	input: 'canu_cov{coverage,([0-9]+)}/yeast.contigs.x.fasta', 'pacbio/sim.SK1_Y12.chrall.cov{coverage,([0-9]+)}.len1500.fastq'
	output: 'canu_cov{coverage,([0-9]+)}/pacbio2canu.sorted.bam'
	shell: '{bwa} bwasw -t12 {input[0]} {input[1]} -b5 -q2 -r1 -z10 -M | samtools view -Sb - | samtools sort - > {output} && {bwa} index {output}'

rule run_phasing:
	input: 'canu_cov{coverage,([0-9]+)}/illumina2canu.vcf', 'canu_cov{coverage,([0-9]+)}/pacbio2canu.sorted.bam'
	output: 'canu_cov{coverage,([0-9]+)}/illumina2canu.wh.vcf'
	log: 'canu_cov{coverage,([0-9]+)}/illumina2canu.wh.vcf.log'
	shell: 'whatshap phase --indels --ignore-read-groups {input[0]} {input[1]} -o {output} 1> {log} 2>&1'

rule align_true_haps_to_contigs:
	input: 'true_haps/SK1.genome.fa', 'true_haps/Y12.genome.fa', 'canu_cov{coverage,([0-9]+)}/yeast.contigs.x.fasta'
	output: 'canu_cov{coverage,([0-9]+)}/true_haps2yeast.contigs.sorted.bam'
	shell: '{bwa} bwasw -t12 {input[2]} {input[0]} {input[1]} -M | samtools view -Sb - | samtools sort - > {output}'

rule true_phasing:
	input: 'canu_cov{coverage,([0-9]+)}/illumina2canu.vcf', 'canu_cov{coverage,([0-9]+)}/true_haps2yeast.contigs.sorted.bam'
	output: 'canu_cov{coverage,([0-9]+)}/illumina2canu.true.wh.vcf'
	log: 'canu_cov{coverage,([0-9]+)}/illumina2canu.true.wh.vcf.log'
	shell: 'whatshap phase --indels --ignore-read-groups {input[0]} {input[1]} -o {output} 1> {log} 2>&1'

rule wh_compare:
	input: 'canu_cov{coverage,([0-9]+)}/illumina2canu.true.wh.vcf', 'canu_cov{coverage,([0-9]+)}/illumina2canu.wh.vcf',
	output: 'canu_cov{coverage,([0-9]+)}/linear_comparison.eval'
	log: 'canu_cov{coverage,([0-9]+)}/linear_comparison.vcf.log'
	shell: 'whatshap compare --tsv-pairwise {output} {input[0]} {input[1]} 2>&1 > {log}'

rule run_mummer_canu:
	input: 'canu_cov{coverage,([0-9]+)}/yeast.contigs.x.fasta', 'true_haps/{genome1, [a-zA-Z0-9]+}.genome.fa',
	output: 'mummer/canu/yeast.canu_cov{coverage,([0-9]+)}to{genome1, [a-zA-Z0-9]+}.report', 'mummer/canu/yeast.canu_cov{coverage,([0-9]+)}to{genome1, [a-zA-Z0-9]+}.1coords'
	shell: '{mummer} {input[1]} {input[0]} -p mummer/canu/yeast.canu_cov{wildcards.coverage}to{wildcards.genome1}'


# align true haps to graph
rule convert_fasta2fastq_refs:
	input: 'true_haps/SK1.genome.fa', 'true_haps/Y12.genome.fa'
	output: 'true_haps/SK1_Y12.genome.fastq'
	run:
		shell('cat {input[0]} {input[1]} | perl scripts/fasta_to_fastq.pl - > {output}')

rule reverse_refs:
	input: 'true_haps/SK1_Y12.genome.fastq',
	output: 'true_haps/SK1_Y12.genome.reverse.fastq'
	shell: './scripts/ReverseReads {input} {output}'

# Take care cannot run parallely because seedsoutindex will interfere.
rule grem_ref_seeds:
	input: 'graph/graph.vg', 'true_haps/SK1_Y12.genome.fastq', 'true_haps/SK1_Y12.genome.reverse.fastq'
	output: 'true_haps/SK1_Y12.genome.seeds.gam'
	run:
		shell('{grem} -f {input[1]} -l 20 -e 7 -n 0 -c 100000000 {input[0]}')
		shell('./scripts/ReadIndexToId {input[1]} seedsoutindex true_haps/seeds_fw.gam')
		shell('{grem} -f {input[2]} -l 20 -e 7 -n 0 -c 100000000 {input[0]}')
		shell('./scripts/ReadIndexToId {input[2]} seedsoutindex true_haps/seeds_bw.gam')
		shell('./scripts/PickSeedHits {output} 50 true_haps/seeds_fw.gam true_haps/seeds_bw.gam')

rule run_ref_aligner:
	input: 'true_haps/SK1_Y12.genome.fastq', 'true_haps/SK1_Y12.genome.seeds.gam', 'graph/graph.vg'
	output: 'true_haps/SK1_Y12.genome.gam'
	shell: './scripts/wrapper -g {input[2]} -f {input[0]} -s {input[1]} -a {output} -t 40 -b 200 -B 500 1> true_haps/SK1_Y12.genome.stdout 2> true_haps/SK1_Y12.genome.stderr'
#TODO: still to get haplotigs
# Now start with graph approach

rule find_bubbles:
	input: 'graph/graph.vg'
	output: 'graph/graph.trans', 'graph/graph.snarls'
	shell: '{vg} snarls -l -t -r {output[0]} {input[0]} > {output[1]}'

rule find_repetiticity:
	input: 'graph/graph.trans', 'approach/graph/sim.SK1_Y12.chrall.cov{coverage,([0-9]+)}.len1500.gam', 'true_haps/SK1_Y12.genome.gam'
	output: 'approach/graph/sim.SK1_Y12.chrall.cov{coverage,([0-9]+)}.reps'
	run:
		param_val = int(wildcards.coverage) + 5		
		shell('python3 ./scripts/tandomicity.x.py {input[0]} {input[1]} {input[2]} {param_val} {output}')

# check once the read name for contigs.. sgarg@d3compute02:/local/data/yeast_analysis/canu_cov40$ ../scripts/vg view -a yeast.contigs.gam | jq '.name' > tig_names, cat tig_names | tr '\n' ','  > tig_names_1
# do it for all the coverages

rule order_bubbles:
	input: 'canu_cov{coverage,([0-9]+)}/yeast.contigs.gam', 'graph/graph.trans', 'approach/graph/sim.SK1_Y12.chrall.cov{coverage,([0-9]+)}.reps',
	output: 'canu_cov{coverage,([0-9]+)}/yeast.contigs.gam_tig00000027.trans' # find the intersection of tig id between all the lists 
	shell: 'python3 ./scripts/ordertransbygam.py {input[2]} {input[1]} {input[0]}'


rule whatshap_graph_phasing:
	input: 'canu_cov{coverage,([0-9]+)}/yeast.contigs.gam_tig{tigids, ([0-9]+)}.trans', 'approach/graph/sim.SK1_Y12.chrall.cov{coverage,([0-9]+)}.len1500.gam', 'graph/graph.vg', 'canu_cov{coverage,([0-9]+)}/yeast.contigs.gam', 'true_haps/SK1_Y12.genome.gam',  'mummer/canu/yeast.canu_cov{coverage,([0-9]+)}toSK1.1coords'
	output: 'canu_cov{coverage,([0-9]+)}/yeast.contigs.gam_tig{tigids, ([0-9]+)}.read_partitions', 'canu_cov{coverage,([0-9]+)}/yeast.contigs.gam_tig{tigids, ([0-9]+)}.haplotigs'
	log: 'canu_cov{coverage,([0-9]+)}/yeast.contigs.gam_tig{tigids, ([0-9]+)}.log'
	shell: 'whatshap phaseg {input[0]} {input[1]} {input[2]} {input[3]} {input[4]} {output[0]} {output[1]} {input[5]} 1> {log} 2>&1'

# copy whatshap code from binary to server
# write in master rule for whatshap graph phasing




	
